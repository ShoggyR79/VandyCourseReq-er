1000,base,"The Beauty and Joy of Computing","Fundamental concepts of computing including abstraction, algorithms, design, and distributed computation. Hands-on curriculum focusing on translating ideas into working computer programs and developing a mastery of practical computational literacy. The relevance and societal impact of computer science are emphasized. Students in the School of Engineering may only receive open elective credit for CS 1000. FALL, SPRING. [3]",FALL/SPRING,none
1100,base,"Applied Programming and Problem Solving with Python","Foundations of computing using Python. Programming fundamentals. Designing, debugging, running programs. Scalar, vector, and matrix computations for scientific computing and data science. Numeric and text processing. Basic data visualization techniques. Intended for students other than computer science and computer engineering majors. Not open to students who have earned credit for CS 1104 or 2204 without permission. Total credit for CS/DS 1100 and CS 1104 will not exceed 4 credit hours. Total credit for CS/DS 1100 and CS 2204 will not exceed 5 hours. Credit hours reduced from second course taken (or from test or transfer credit) as appropriate. FALL, SPRING. [3]",FALL/SPRING,none
1101,base,"Programming and Problem Solving","An intensive introduction to algorithm development and problem solving on the computer. Structured problem definition, top down and modular algorithm design. Running, debugging, and testing programs. Program documentation. Not open to students who have earned credit for CS 1104 without permission. Total credit for this course and CS 1104 will not exceed 3 credit hours. Credit hours reduced from second course taken (or from test or transfer credit) as appropriate. FALL, SPRING. [3]",FALL/SPRING,core
1103,base,"Introductory Programming for Engineers and Scientists","Problem solving on the computer. Inte    g MATLAB. Generic programming concepts. FALL, SPRING. [3]",FALL/SPRING,none
1104,base,"Programming and Problem Solving with Python","An intensive introduction to algorithm development and problem solving using the Python programming language. Structured problem definition, top down and modular algorithm design. Running, debugging, and testing programs. Program documentation. Not open to students who have earned credit for CS 1100, DS 1100, or CS 1101 without permission. Total credit for this course and CS 1100 will not exceed 4 credit hours. Total credit for this course and DS 1100 will not exceed 4 credit hours. Total credit for this course and CS 1101 will not exceed 3 credit hours. Credit hours reduced from second course taken (or from test or transfer credit) as appropriate. FALL, SPRING. [3]",FALL/SPRING,core
1151,base,"Computers and Ethics","Analysis and discussion of problems created for society by computers, and how these problems pose ethical dilemmas to both computer professionals and computer users. Topics include: computer crime, viruses, software theft, ethical implications of life-critical systems. FALL, SPRING. [3]",FALL/SPRING,core
2201,1101/1104,"Program Design and Data Structures","Continuation of CS 1101/1104. The study of elementary data structures, their associated algorithms and their application in problems; rigorous development of programming techniques and style; design and implementation of programs with multiple modules, using good data structures and good programming style. Prerequisite: CS 1101 or 1104. FALL, SPRING. [3]",FALL/SPRING,core
2204,1100/1104,"Program Design and Data Structures for Scientific Computing","Data structures and their associated algorithms in application to computational problems in science and engineering. Time and memory complexity; dynamic memory structures; sorting and searching; advanced programming and program-solving strategies; efficient software library use. Total credit for this course and CS 1100 will not exceed 5 credit hours. Total credit for this course and DS 1100 will not exceed 5 credit hours. Credit hours reduced from second course taken (or from test or transfer credit) as appropriate. Prerequisite: CS 1100, CS 1104, or DS 1100. SPRING. [3]",SPRING,none
2212,base,"Discrete Structures","Survey of the mathematical tools necessary for an understanding of computer science. Sets, relations, functions, basic counting techniques, permutations, combinations, graphs, recurrence relations, simple analysis of algorithms, O-notation, Boolean algebra, propositional calculus, and numeric representation. Prerequisite: A course in computer science or two semesters of calculus. FALL, SPRING. [3]",FALL/SPRING,core
2231,2201,"Computer Organization","The entire hierarchical structure of computer architecture, beginning at the lowest level with a simple machine model (e.g., a simple von Neumann machine). Processors, process handling, IO handling, and assembler concepts. Graduate credit not given for computer science majors. Prerequisite: CS 2201. Corequisite: EECE 2116, EECE 2116L. FALL, SPRING. [3]",FALL/SPRING,hardware
3250,2201,2212,"Algorithms","Advanced data structures, systematic study and analysis of important algorithms for searching; sorting; string processing; mathematical, geometrical, and graph algorithms, classes of P and NP, NP-complete and intractable problems. Prerequisite: CS 2201, CS 2212. FALL, SPRING. [3]",FALL/SPRING,core
3251,2201,"Intermediate Software Design","High quality development and reuse of architectural patterns, design patterns, and software components. Theoretical and practical aspects of developing, documenting, testing, and applying reusable class libraries and object-oriented frameworks using object-oriented and component-based programming languages and tools. Prerequisite: CS 2201. FALL, SPRING [3]",FALL/SPRING,core
3252,2212,"Theory of Automata, Formal Languages, and Computation","Finite-state machines and regular expressions. Context-free grammars and languages. Pushdown automata. Turing machines. Undecideability. The Chomsky hierarchy. Computational complexity. Prerequisite: CS 2212. SPRING. [3]",SPRING,theory
3253,1101,3251,"Parallel Functional Programming","Conceptual and practical aspects of designing, implementing, and debugging parallel software programs using functional programming language features and frameworks. Systematic reuse of scalable and robust software patterns and architectures for parallel programs. Prerequisite: CS 1101, CS 3251. FALL. [3]",FALL,softwareED
3254,1101,3251,"Concurrent Object-Oriented Programming","Conceptual and practical aspects of designing, implementing, and debugging concurrent software programs using object-oriented programming language features and frameworks. Systematic reuse of scalable and robust software patterns and architectures for concurrent programs. Prerequisite: CS 1101, CS 3251. SPRING. [3]",SPRING,softwareED
3258,3251,"Introduction to Computer Graphics","2D rendering and image-based techniques, 2D and 3D transformations, modeling, 3D rendering, graphics pipeline, ray-tracing, and texture-mapping. Prerequisite: MATH 2400, 2410, 2501 or 2600; CS 3251. SPRING. [3]",SPRING,gavr
3259,2201,"Project in Computer Animation Design and Technology","Principles and techniques of computer animation. Topics include storyboarding, camera control, skeletons, inverse kinematics, splines, keyframing, motion capture, dynamic simulation, particle systems, facial animation, and motion perception. Students work in groups on the design, modeling, animation, and rendering of a computer animation project. Prerequisite: MATH 2400, 2410, 2501, or 2600; CS 2201. FALL. [3]",FALL,gavr
3262,1100/2201/2204,"Applied Machine Learning","Fundamentals of machine learning with emphasis on practical applications to data science problems. Supervised learning (linear and logistic regression, decision trees, support vector machines, neural networks, and deep learning), unsupervised learning (feature selection, data clustering, dimensionality reduction); ethical principles and social implications of machine learning. Intended for students other than computer science majors. Prerequisite: One of CS 1100, 2201, or 2204; one of BME 3200, BSCI 3270, CE 3300, DS 2100, ECON 1500 or 1510, MATH 2810 or 2820 or 2821, PSY 2100, PSY-PC 2110, or SOC 2100. FALL, SPRING. [3]",FALL/SPRING,mlai
3265,2201,"Database Management Systems","Logical and physical organization of databases. Data models and query languages, with emphasis on the relational model and its semantics. Data independence, security, integrity, concurrency. Prerequisite: CS 2201. [3]",FALL/SPRING,data
3270,2201,2231,"Programming Languages","General criteria for design, implementation, and evaluation of programming languages. Historical perspective. Syntactic and semantic specification, compilations, and interpretation processes. Comparative studies of data types and data control, procedures and parameters, sequence control, nesting, scope and storage management, run-time representations. Problem solving using non-standard languages. Prerequisite: CS 2201; CS 2231 or EECE 2123. FALL, SPRING. [3]",FALL/SPRING,core
3274,2201,"Modeling and Simulation","General theory of modeling and simulation of a variety of systems: physical processes, computer systems, biological systems, and manufacturing processes. Principles of discrete-event, continuous, and hybrid system modeling, simulation algorithms for the different modeling paradigms, methodologies for constructing models of a number of realistic systems, and analysis of system behavior. Computational issues in modeling and analysis of systems. Stochastic simulations. Prerequisite: CS 2201. [3]",FALL/SPRING,softwareED
3276,3270,"Compiler Construction","Review of programming language structures, translation, loading, execution, and storage allocation. Compilation of simple expressions and statements. Organization of a compiler including compile-time and run-time symbol tables, lexical scan, syntax scan, object code generation, error diagnostics, object code optimization techniques, and overall design. Use of a high-level language to write a complete compiler. Prerequisite: CS 3270. [3]",FALL/SPRING,hardware
3281,2231,3251,"Principles of Operating Systems I","Resource allocation and control functions of operating systems. Scheduling of processes and processors. Concurrent processes and primitives for their synchronization. Use of parallel processes in designing operating system subsystems. Methods of implementing parallel processes on conventional computers. Virtual memory, paging, protection of shared and non-shared information. Structures of data files in secondary storage. Security issues. Case studies. Prerequisite: CS 2231 or EECE 2123, CS 3251. FALL, SPRING. [3]",FALL/SPRING,core
3282,3281,"Principles of Operating Systems II","Projects involving modification of a current operating system. Lectures on memory management policies, including virtual memory. Protection and sharing of information, including general models for implementation of various degrees of sharing. Resource allocation in general, including deadlock detection and prevention strategies. Operating system performance measurement, for both efficiency and logical correctness. Two hours lecture and one hour laboratory. Prerequisite: CS 3281. [3]",FALL/SPRING,hardware
3860,2201,"Undergraduate Research","Open to qualified majors with consent of instructor and adviser. No more than 6 hours may be counted towards the computer science major. Prerequisite: CS 2201. [1-3 each semester]",FALL/SPRING,research
3861,2201,"Undergraduate Research","Open to qualified majors with consent of instructor and adviser. No more than 6 hours may be counted towards the computer science major. Prerequisite: CS 2201. [1-3 each semester]",FALL/SPRING,research
4249,3251,"Projects in Virtual Reality Design","Students work in groups on specification, design, and construction of complex immersive 3D virtual environments. Includes modeling, interaction, usability, rendering, perception, and tracking. Prerequisite: CS 3251. FALL. [3].",FALL,gavr
4260,3250,3251,"Artificial Intelligence","Principles and programming techniques of artificial intelligence. Strategies for searching, representation of knowledge and automatic deduction, learning, and adaptive systems. Survey of applications. Prerequisite: CS 3250, CS 3251; MATH 2810 or 2820 or 3640. FALL. [3]",FALL,mlai
4262,3251,"Foundations of Machine Learning","Theoretical and algorithmic foundations of supervised learning, unsupervised learning, and reinforcement learning. Linear and nonlinear regression, kernel methods, support vector machines, neural networks and deep learning methods, instance-based methods, ensemble classifiers, clustering and dimensionality reduction, value and policy iteration. Explainable AI, ethics, and data privacy. Prerequisite: CS 3251; one of MATH 2810, 2820, or 3640; one of MATH 2410, 2500, 2501, or 2600. SPRING. [3]",SPRING,mlai
4266,3251,"Topics in Big Data","Principles and practices of big data processing and analytics. Data storage databases and data modeling techniques, data processing and querying, data analytics and applications of machine learning using these systems. Prerequisite: CS 3251. SPRING. [3]",SPRING,data
4267,3250,3251,"Deep Learning","Models, algorithms, mathematical tools, and machine learning concepts used in deep learning. Modern practical deep feedforward, convolutional, and recurrent networks. Regularization for deep learning and optimization. Practical design methods. Prerequisite: CS 3250, CS 3251; MATH 2410 or 2600; MATH 2810 or 2820. SPRING. [3]",SPRING,mlai
4269,4260,"Project in Artificial Intelligence","Students work in small groups on the specification, design, implementation, and testing of a sizeable AI software project. Projects (e.g., an "intelligent" game player) require that students address a variety of AI subject areas, notably heuristic search, uncertain reasoning, planning, knowledge representation, and learning. Class discussion highlights student progress, elaborates topics under investigation, and identifies other relevant topics (e.g., vision) that the project does not explore in depth. Prerequisite: CS 4260. SPRING. [3]",SPRING,mlai
4277,3251,"Cyber Security","Software issues, secure software design, attacks and detection, identity, sessions, human security mistakes, and security auditing. Prerequisite: CS 3251. FALL. [3]",FALL,cybersecurity
4278,3251,"Principles of Software Engineering","The nature of software. The object-oriented paradigm. Software life-cycle models. Requirements, specification, design, implementation, documentation, and testing of software. Object-oriented analysis and design. Software maintenance. Prerequisite: CS 3251. FALL. [3]",FALL,softwareED
4279,4278,"Software Engineering Project","Students work in teams to specify, design, implement, document, and test a nontrivial software project. The use of CASE (Computer Assisted Software Engineering) tools is stressed. Prerequisite: CS 4278. SPRING. [3]",SPRING,softwareED
4283,3281,"Computer Networks","Computer communications. Network (Internet) architecture. Algorithms and protocol design at each layer of the network stack. Cross-layer interactions and performance analysis. Network simulation tools. Lab and programming assignments. Course not open to students who have earned credit for EECE 4371 without permission. Serves as repeat credit for EECE 4371. Prerequisite: CS 3281 or EECE 4376. [3]",FALL/SPRING,netCloud
4284,3281,"Computer Systems Analysis","Techniques for evaluating computer system performance with emphasis upon application. Topics include measurement and instrumentation techniques, benchmarking, simulation techniques, elementary queuing models, data analysis, operation analysis, performance criteria, case studies. Project involving a real computer system. Prerequisite: CS 3281. [3]",FALL/SPRING,hardware
4285,4283,"Network Security","Principles and practice of network security. Security threats and mechanisms. Cryptography, key management, and message authentication. System security practices and recent research topics. Prerequisite: CS 4283. [3]",FALL/SPRING,cybersecurity
4287,3281,"Principles of Cloud Computing","Fundamental concepts of cloud computing, different service models, techniques for resource virtualization, programming models, management, mobile cloud computing, recent advances, and hands-on experimentation. Prereq: CS 3281. [3]",FALL/SPRING,netCloud
4288,3251,"Web-based System Architecture","Core concepts necessary to architect, build, test, and deploy complex web-based systems; analysis of key domain requirements in security, robustness, performance, and scalability. Prerequisite: CS 3251. FALL. [3]",FALL,netCloud
4959,3251,"Computer Science Seminar","Elements of professional engineering practice, professional education and lifelong learning, intellectual property and software patents, open source and crowd source software development, liability, soft risk safety and security, privacy issues, interdisciplinary teams and team tools, professional organization, careers, entrepreneurship, human computer interaction. Prerequisite: CS 3251. FALL [1]",FALL,seminar
